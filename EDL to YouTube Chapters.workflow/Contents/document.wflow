<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>523</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run JavaScript.action</string>
				<key>ActionName</key>
				<string>Run JavaScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>var app = Application.currentApplication();app.includeStandardAdditions = true;function run(input, parameters) {    var filePath = new Path(input[0]);    //Check if the file extension is valid    if (getFileExtension(filePath.toString()) == "edl") {        var data = app.read(filePath); //Read the file's contents as text        var markers = [];        var lines = data.split("\r\n"); //Split data by each line        var regexTimestamp = new RegExp(            /\d{3,4}  \d{3,4}      V     C        (?&lt;markerTimestamp&gt;\d{2}:\d{2}:\d{2}:\d{2}) \d{2}:\d{2}:\d{2}:\d{2} \d{2}:\d{2}:\d{2}:\d{2} \d{2}:\d{2}:\d{2}:\d{2}  /        ); //Regex for matching the timestamps        var regexMarkerName = new RegExp(            / \|C:\w+ \|M:(?&lt;markerName&gt;[\w\s]+) \|D:1/        ); //Regex for matching the marker names (names of timestamps)        //Loop through the lines        for (var i = 0; i &lt; lines.length; i++) {            //Get the current line and the line after            var line = lines[i];            var followingLine = lines[i + 1];            //Check for the timestamp            var firstMatch = line.match(regexTimestamp)?.groups;            if (firstMatch) {                //Check for the marker name                var secondMatch = followingLine.match(regexMarkerName)?.groups;                if (secondMatch) {                    //Add the chapter                    markers.push({                        timecode: toYouTubeTimecode(firstMatch.markerTimestamp),                        markerName: secondMatch.markerName                    });                }            }        }        //Generate the final output string        var finalOutput = "Chapters:\n";        markers.forEach(marker =&gt; {            finalOutput += `${marker.timecode} - ${marker.markerName}\r\n`;        });        //Clean up the trailing spaces from the string        finalOutput = finalOutput.trim();        //Return the finalOutput back to Automator        return finalOutput;    } else {        //Show error        throw new Error("File must be a .edl file.");    }}//Function to convert weird DaVinci Resolve timestamp format into standard HH:MM:SSfunction toYouTubeTimecode(toParse) {    let parts = toParse.split(":");    let time = new Date(Date.parse(`1970-01-01T${parts[0]}:${parts[1]}:${parts[2]}Z`));    time.setHours(time.getHours() - 1);    return `${time.getMinutes().toString().padStart(2, '0')}:${time        .getSeconds()        .toString()        .padStart(2, '0')}`;}//Function to get extension from filefunction getFileExtension(filePath) {    //Split the path into parts    var pathParts = filePath.split("/");    //Get the last part (assuming the filename is at the end)    var fileName = pathParts[pathParts.length - 1];    //Check if the filename has a dot (.)    if (fileName.indexOf('.') !== -1) {        //Extract the extension from the filename        return fileName.split('.').pop()    }}</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunJavaScript</string>
				<key>CFBundleVersion</key>
				<string>1.0</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunJavaScriptAction</string>
				<key>IgnoresInput</key>
				<false/>
				<key>InputUUID</key>
				<string>3AB7F855-2F43-456D-9C27-52FFAA5E7A7D</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
					<string>JavaScript</string>
				</array>
				<key>OutputUUID</key>
				<string>2F6A991C-EB4E-4E94-9435-6C2D0489727A</string>
				<key>UUID</key>
				<string>8090D32C-EEB6-4D88-805B-88C3812BA305</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>function run(input, parameters) {
	
	// Your script goes here

	return input;
}</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>825.000000:368.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run JavaScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.attributed-string</string>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.2.1</string>
				<key>AMApplication</key>
				<array>
					<string>TextEdit</string>
				</array>
				<key>AMParameterProperties</key>
				<dict/>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.textedit.document-object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/New TextEdit Document.action</string>
				<key>ActionName</key>
				<string>New TextEdit Document</string>
				<key>ActionParameters</key>
				<dict/>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.CreateNewTextEditDocument</string>
				<key>CFBundleVersion</key>
				<string>1.2.1</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<true/>
				<key>CanShowWhenRun</key>
				<false/>
				<key>Category</key>
				<array>
					<string>AMCategoryText</string>
				</array>
				<key>Class Name</key>
				<string>AMNewTextEditDocumentAction</string>
				<key>IgnoresInput</key>
				<false/>
				<key>InputUUID</key>
				<string>8981E87D-8958-4FE8-8BB6-DFC26F22ED4D</string>
				<key>Keywords</key>
				<array>
					<string>Create</string>
					<string>Make</string>
					<string>Document</string>
					<string>Text</string>
					<string>New</string>
					<string>Display</string>
					<string>Open</string>
				</array>
				<key>OutputUUID</key>
				<string>46747F4B-1D04-4FF8-8CB8-061245F9A009</string>
				<key>UUID</key>
				<string>44D20149-1144-4938-9039-1A4D422B4C48</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>TextEdit</string>
				</array>
				<key>arguments</key>
				<dict/>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>207.000000:68.000000</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict>
		<key>73380E29-5D0A-4B67-94D4-6D6DFC700807</key>
		<dict>
			<key>from</key>
			<string>8090D32C-EEB6-4D88-805B-88C3812BA305 - 8090D32C-EEB6-4D88-805B-88C3812BA305</string>
			<key>to</key>
			<string>44D20149-1144-4938-9039-1A4D422B4C48 - 44D20149-1144-4938-9039-1A4D422B4C48</string>
		</dict>
	</dict>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleID</key>
		<string>com.apple.finder</string>
		<key>applicationBundleIDsByPath</key>
		<dict>
			<key>/System/Library/CoreServices/Finder.app</key>
			<string>com.apple.finder</string>
		</dict>
		<key>applicationPath</key>
		<string>/System/Library/CoreServices/Finder.app</string>
		<key>applicationPaths</key>
		<array>
			<string>/System/Library/CoreServices/Finder.app</string>
		</array>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>15</integer>
		<key>processesInput</key>
		<false/>
		<key>serviceApplicationBundleID</key>
		<string>com.apple.finder</string>
		<key>serviceApplicationPath</key>
		<string>/System/Library/CoreServices/Finder.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<false/>
		<key>systemImageName</key>
		<string>NSTouchBarBookmarks</string>
		<key>useAutomaticInputType</key>
		<false/>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
